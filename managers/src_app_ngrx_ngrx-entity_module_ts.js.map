{"version":3,"file":"src_app_ngrx_ngrx-entity_module_ts.js","mappings":"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","sources":["./src/app/ngrx/manager-wrapper.service.ts","./src/app/ngrx/ngrx-entity.actions.ts","./src/app/ngrx/ngrx-entity.effects.ts","./src/app/ngrx/ngrx-entity.module.ts","./src/app/ngrx/ngrx-entity.reducer.ts","./src/app/ngrx/ngrx-entity.selectors.ts","./src/app/ngrx/ngrx.component.ts","./src/app/ngrx/ngrx.component.html"],"sourcesContent":["\r\nimport { Injectable } from \"@angular/core\";\r\nimport { select, Store } from \"@ngrx/store\";\r\nimport { Subject } from \"rxjs\";\r\nimport { map, skip } from \"rxjs/operators\";\r\nimport { LoggerService } from \"../shared/services/logger.service\";\r\nimport { MeasureService } from \"../shared/services/measure.service\";\r\nimport { selectEntities } from './ngrx-entity.selectors';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class WrapperService {\r\n    store$ = new Subject();\r\n    measures: number[] = [];\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private measureService: MeasureService,\r\n        private loggerService: LoggerService\r\n    ) {\r\n        this.store.pipe(skip(2), select(selectEntities)).subscribe((z) => {\r\n            const start = this.measureService.marks[this.measureService.marks.length - 1]?.start;\r\n            const end = this.measureService.end();\r\n            this.measures.push(end);\r\n            this.loggerService.log(start, this.measures.length, end);\r\n            this.store$.next(z);\r\n        }\r\n        )\r\n    }\r\n\r\n    dispatch(action: any) {\r\n        this.measureService.start();\r\n        this.store.dispatch(action);\r\n    }\r\n}","import { createAction, props } from '@ngrx/store';\nimport { Entity } from '../shared/models/Entities';\n\n\nexport const Add = createAction('[Entity] Add', props<{payload:Entity}>());\nexport const Added = createAction('[Entity] Add success', props<{payload:Entity}>());","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { EMPTY, of, delay } from 'rxjs';\nimport { map, mergeMap, catchError, switchMap, exhaustMap, tap } from 'rxjs/operators';\nimport { Add, Added } from './ngrx-entity.actions';\n\n@Injectable()\nexport class EntityEffects {\n    addEntity$ = createEffect(() => this.actions$.pipe(\n        ofType(Add),\n        mergeMap(({ payload }) => of(payload).pipe(delay(1))\n            .pipe(\n                map(entity => Added({ payload: entity }))\n            ))\n    )\n    );\n\n    constructor(\n        private actions$: Actions\n    ) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NgrxComponent } from './ngrx.component';\nimport { EntitiesReducer } from './ngrx-entity.reducer';\nimport { StoreModule } from '@ngrx/store';\nimport { SharedModule } from '../shared/shared.module';\nimport { EntityEffects } from './ngrx-entity.effects';\nimport { EffectsModule } from '@ngrx/effects';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([{\n      path: '',\n      component: NgrxComponent\n    }]),\n    SharedModule,\n    StoreModule.forFeature('entityState', EntitiesReducer),\n    EffectsModule.forFeature([EntityEffects])\n  ],\n  declarations: [NgrxComponent]\n})\nexport class NgRxModule { }","import { createReducer, createSelector, on } from '@ngrx/store';\nimport { EntityState } from '../shared/models/Entities';\nimport { Add, Added } from './ngrx-entity.actions';\n\nexport const initialState = {\n  entities: [],\n} as EntityState;\n\n\nconst _reducer = createReducer(\n  initialState,\n  on(Added, (state, {payload}) => ({\n    entities: [...state.entities, payload]\n  }))\n);\n\nexport function EntitiesReducer(state, action) {\n  return _reducer(state, action);\n}","import { createSelector } from \"@ngrx/store\";\nimport { EntityState } from \"../shared/models/Entities\";\n\n\nexport interface NgRxState {\n  entityState: EntityState;\n}\n\nexport const selectEntities = createSelector(\n  (state: NgRxState) => state.entityState,\n  (state: EntityState) => state.entities\n);\n","import { Component } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { Add } from './ngrx-entity.actions';\nimport { Store, select } from '@ngrx/store';\nimport { selectEntities } from './ngrx-entity.selectors';\nimport { ManagerComponent } from '../manager-base.component';\nimport { ActivatedRoute } from '@angular/router';\nimport { ChangeDetectionStrategy } from '@angular/core';\nimport { MeasureService } from '../shared/services/measure.service';\nimport { WrapperService } from './manager-wrapper.service';\nimport { Entity } from '../shared/models/Entities';\nimport { createEntity } from '../shared/utils/Entities';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay } from 'rxjs';\nimport { LoggerService } from '../shared/services/logger.service';\nimport { ChartPoint } from '../shared/components/scatter-chart/scatter-chart.component';\nimport { LocalStorageService } from '../shared/services/local-storage.service';\n\n\n@Component({\n  selector: 'app-entity',\n  templateUrl: './ngrx.component.html',\n  providers: [WrapperService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgrxComponent extends ManagerComponent {\n  entities$: Observable<Entity[]>;\n  public name = 'ngrx';\n  constructor(route: ActivatedRoute, private store: Store, measureService: MeasureService, private wrapperManager: WrapperService, loggerService: LoggerService, localStorageService: LocalStorageService) {\n    super(route, measureService, loggerService, localStorageService);\n    this.entities$ = this.store.select(selectEntities);\n    this.wrapperManager.store$.subscribe((z: Entity) => {\n      if (this.wrapperManager.measures.length < this.entitiesCount) {\n        this.wrapperManager.dispatch(Add({ payload: createEntity(z) }));\n      } else {\n        this.chartData = this.buildChartData();\n        this.saveResult();\n      }\n    })\n  }\n\n  public ngOnInit(): void {\n    this.wrapperManager.dispatch(Add({ payload: createEntity(undefined) }));\n  }\n}\n","<ng-container *ngIf=\"entities$ | async; let entities\">\n  <app-progress-bar\n    [value]=\"entities.length\"\n    label=\"entities\"\n    [max]=\"entitiesCount\"\n  ></app-progress-bar>\n\n  <app-scatter-chart\n  [data]=\"chartData\"\n  color=\"blue\"\n  label=\"NgRx\"\n  *ngIf=\"chartData?.length\"\n></app-scatter-chart>\n</ng-container>"],"names":["Add","selectEntities","ManagerComponent","WrapperService","createEntity","i0","ctx_r0","NgrxComponent","constructor","route","store","measureService","wrapperManager","loggerService","localStorageService","entities$","select","store$","subscribe","z","measures","length","entitiesCount","dispatch","payload","chartData","buildChartData","saveResult","ngOnInit","undefined","selectors","features","decls","vars","consts","template"],"sourceRoot":"webpack:///"}